# -*- coding: utf-8 -*-
"""Copy of Assignment 1.1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11RrYKfRG8ZPowN0DBz5PX4jpOF8v6XyL

# Assignment 1.1 - Pandas Data Analysis Practice

*This assignment is a part of the project ["Customer Churn Analysis: From Data To Strategy"]*

In this assignment, you'll get to practice some of the concepts and skills covered in pandas.

As you go through this notebook, you will find a **???** in certain places. To complete this assignment, you must replace all the **???** with appropriate values, expressions or statements to ensure that the notebook runs properly end-to-end.

Some things to keep in mind:

* Do not change variable names, delete cells or disturb other existing code. It may cause problems during evaluation.
* In some cases, you may need to add some code cells or new statements before or after the line of code containing the **???**.
* Questions marked **(Optional)** will not be considered for evaluation, and can be skipped. They are for your learning.


If you are stuck, you can ask for help on the Whatsapp group. Please do not use **ChatGPT or any other LLM to get solutions to the questions.**


Deadline : **22 May, 11:59 pm**
"""

import pandas as pd

"""In this assignment, we're going to analyze an operate on data from a CSV file. Let's begin by downloading the CSV file.

Let's load the data from the CSV file into a Pandas data frame.
"""

countries_df = pd.read_csv('/content/sample_data/countries.csv')

countries_df

"""**Q1: How many countries does the dataframe contain?**

Hint: Use the `.shape` method.
"""

num_countries = countries_df["location"].shape

print('There are {} countries in the dataset'.format(num_countries))

"""**Q2: Retrieve a list of continents from the dataframe?**

*Hint: Use the `.unique` method of a series.*
"""

continents = countries_df['continent'].value_counts().shape

continents

"""**Q3: What is the total population of all the countries listed in this dataset?**"""

total_population = countries_df["population"].sum()

print('The total population is {}.'.format(int(total_population)))

"""**Q: (Optional) What is the overall life expectancy across in the world?**

*Hint: You'll need to take a weighted average of life expectancy using populations as weights.*
"""

weighted_sum=(countries_df['life_expectancy']*countries_df['population'])

weighted_sum_total=weighted_sum.sum()

weighted_average=weighted_sum_total/total_population

print('The overall life expectancy is {}.'.format(float(weighted_average)))

"""**Q4: Create a dataframe containing 10 countries with the highest population.**

*Hint: Chain the `sort_values` and `head` methods.*
"""

most_populous_df = countries_df.sort_values(by='population', ascending=False).head(10)

most_populous_df

"""**Q5: Add a new column in `countries_df` to record the overall GDP per country (product of population & per capita GDP).**


"""

countries_df['gdp'] = countries_df['population'] * countries_df['gdp_per_capita']

countries_df

"""**Q: (Optional) Create a dataframe containing 10 countries with the lowest GDP per capita, among the counties with population greater than 100 million.**"""

lowest_gdp_df = countries_df.loc[countries_df['population'] > 100000000].sort_values(by='gdp_per_capita').head(10)

lowest_gdp_df

"""**Q6: Create a data frame that counts the number countries in each continent?**

*Hint: Use `groupby`, select the `location` column and aggregate using `count`.*
"""

country_counts_df = countries_df.groupby('continent').count()['location']

country_counts_df

"""**Q7: Create a data frame showing the total population of each continent.**

*Hint: Use `groupby`, select the population column and aggregate using `sum`.*
"""

continent_populations_df = countries_df.groupby('continent')['population'].sum()

continent_populations_df

"""Let's download another CSV file containing overall Covid-19 stats for various countires, and read the data into another Pandas data frame."""

covid_data_df = pd.read_csv('/content/sample_data/covid-countries-data.csv')

covid_data_df

"""**Q8: Count the number of countries for which the `total_tests` data is missing.**

*Hint: Use the `.isna` method.*
"""

total_tests_missing = covid_data_df['total_tests'].isna().sum()

total_tests_missing

print("The data for total tests is missing for {} countries.".format(int(total_tests_missing)))

"""Let's merge the two data frames, and compute some more metrics.

**Q9: Merge `countries_df` with `covid_data_df` on the `location` column.**

*Hint: Use the `.merge` method on `countries_df`.
"""

combined_df = countries_df.merge(covid_data_df,on='location')

combined_df

"""**Q10: Add columns `tests_per_million`, `cases_per_million` and `deaths_per_million` into `combined_df`.**"""

combined_df['tests_per_million'] = combined_df['total_tests'] * 1e6 / combined_df['population']

combined_df['cases_per_million'] = combined_df['total_cases'] * 1e6 / combined_df['population']

combined_df['deaths_per_million'] = combined_df['total_deaths'] * 1e6 / combined_df['population']

combined_df

"""**Q11: Create a dataframe with 10 countires that have highest number of tests per million people.**"""

highest_tests_df = combined_df.sort_values(by='tests_per_million', ascending=False).head(10)

highest_tests_df

"""**Q12: Create a dataframe with 10 countires that have highest number of positive cases per million people.**"""

highest_cases_df = combined_df.sort_values(by='cases_per_million',ascending=False).head(10)

highest_cases_df

"""**Q13: Create a dataframe with 10 countires that have highest number of deaths cases per million people?**"""

highest_deaths_df = combined_df.sort_values(by='deaths_per_million',ascending=False).head(10)

highest_deaths_df

"""**(Optional) Q: Count number of countries that feature in both the lists of "highest number of tests per million" and "highest number of cases per million".**"""

highest_cases_test_df=highest_cases_df.merge(highest_tests_df,on='location').count()['location']

highest_cases_test_df



"""**(Optional) Q: Count number of countries that feature in both the lists "20 countries with lowest GDP per capita" and "20 countries with the lowest number of hospital beds per thousand population". Only consider countries with a population higher than 10 million while creating the list.**"""

countries_lowest_gdp_df=countries_df.loc[countries_df['population']>10000000].sort_values(by='gdp_per_capita').head(20)

countries_lowest_beds_df=countries_df[countries_df['population']>10000000].sort_values(by='hospital_beds_per_thousand').head(20)

total_countries=countries_lowest_gdp_df.merge(countries_lowest_beds_df,on='location').count()['location']

total_countries

"""## Submission

Congratulations on making it this far! You've reached the end of this assignment, and you just completed your first real-world data analysis problem.

"""

